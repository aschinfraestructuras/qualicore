const { createClient } = require('@supabase/supabase-js');

const supabaseUrl = "https://mjgvjpqcdsmvervcxjig.supabase.co";
const supabaseKey = "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6Im1qZ3ZqcHFjZHNtdmVydmN4amlnIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTI0MDU1NDksImV4cCI6MjA2Nzk4MTU0OX0.dlsCn20Z9M71DGjnNeansnw--Kt8A3bdeIUbfYFpNqk";

const supabase = createClient(supabaseUrl, supabaseKey);

async function testNaoConformidadesSimples() {
  console.log('üß™ Teste Simples de N√£o Conformidades...\n');

  try {
    // 1. Fazer login
    console.log('1Ô∏è‚É£ Fazendo login...');
    const { data: { user }, error: authError } = await supabase.auth.signInWithPassword({
      email: 'admin@qualicore.com',
      password: 'admin123'
    });

    if (authError || !user) {
      console.error('‚ùå Erro no login:', authError?.message);
      return;
    }

    console.log('‚úÖ Login realizado com sucesso');
    console.log('üë§ User ID:', user.id);

    // 2. Verificar estrutura da tabela
    console.log('\n2Ô∏è‚É£ Verificando estrutura da tabela...');
    
    const { data: columns, error: columnsError } = await supabase
      .from('information_schema.columns')
      .select('column_name, data_type, is_nullable')
      .eq('table_name', 'nao_conformidades')
      .eq('table_schema', 'public')
      .order('ordinal_position');

    if (columnsError) {
      console.error('‚ùå Erro ao verificar estrutura:', columnsError);
    } else {
      console.log('üìã Colunas da tabela:');
      columns.forEach(col => {
        console.log(`   - ${col.column_name}: ${col.data_type} (${col.is_nullable})`);
      });
    }

    // 3. Tentar criar uma n√£o conformidade simples
    console.log('\n3Ô∏è‚É£ Criando n√£o conformidade simples...');
    
    const novaNC = {
      codigo: 'NC-SIMPLE-001',
      tipo: 'material',
      severidade: 'media',
      categoria: 'inspecao',
      data_deteccao: new Date().toISOString().split('T')[0],
      descricao: 'Teste simples de n√£o conformidade',
      impacto: 'medio',
      area_afetada: '√Årea de teste',
      responsavel_deteccao: 'Teste'
    };

    console.log('üì§ Dados a enviar:', novaNC);

    const { data: ncCriada, error: createError } = await supabase
      .from('nao_conformidades')
      .insert([novaNC])
      .select()
      .single();

    if (createError) {
      console.error('‚ùå Erro ao criar n√£o conformidade:', createError);
      console.error('üîç Detalhes do erro:', {
        message: createError.message,
        details: createError.details,
        hint: createError.hint,
        code: createError.code
      });
      return;
    }

    console.log('‚úÖ N√£o conformidade criada com sucesso!');
    console.log('üÜî ID:', ncCriada.id);
    console.log('üìã C√≥digo:', ncCriada.codigo);
    console.log('üìù Descri√ß√£o:', ncCriada.descricao);

    // 4. Buscar a n√£o conformidade criada
    console.log('\n4Ô∏è‚É£ Buscando n√£o conformidade criada...');
    
    const { data: ncBuscada, error: getError } = await supabase
      .from('nao_conformidades')
      .select('*')
      .eq('id', ncCriada.id)
      .single();

    if (getError) {
      console.error('‚ùå Erro ao buscar n√£o conformidade:', getError);
      return;
    }

    console.log('‚úÖ N√£o conformidade encontrada');
    console.log('üìã Dados completos:', JSON.stringify(ncBuscada, null, 2));

    // 5. Listar todas as n√£o conformidades
    console.log('\n5Ô∏è‚É£ Listando todas as n√£o conformidades...');
    
    const { data: todasNCs, error: listError } = await supabase
      .from('nao_conformidades')
      .select('id, codigo, descricao, created_at')
      .order('created_at', { ascending: false });

    if (listError) {
      console.error('‚ùå Erro ao listar n√£o conformidades:', listError);
      return;
    }

    console.log(`‚úÖ Encontradas ${todasNCs.length} n√£o conformidades`);
    todasNCs.forEach((nc, index) => {
      console.log(`   ${index + 1}. ${nc.codigo} - ${nc.descricao}`);
    });

    // 6. Limpar dados de teste
    console.log('\n6Ô∏è‚É£ Limpando dados de teste...');
    
    const { error: deleteError } = await supabase
      .from('nao_conformidades')
      .delete()
      .eq('codigo', 'NC-SIMPLE-001');

    if (deleteError) {
      console.error('‚ùå Erro ao limpar dados de teste:', deleteError);
    } else {
      console.log('‚úÖ Dados de teste removidos');
    }

    console.log('\nüéâ Teste conclu√≠do com sucesso!');

  } catch (error) {
    console.error('‚ùå Erro geral:', error);
  }
}

testNaoConformidadesSimples(); 